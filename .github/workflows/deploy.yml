name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: pytest

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download SSH Key from S3
        run: |
          aws s3 cp s3://trade-api-alhassan-2025/ec2-key.pem ./ec2-key.pem
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Set SSH Key Permissions
        run: chmod 600 ./ec2-key.pem

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: trade-orders-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image and tag it with the Git SHA
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key_path: ./ec2-key.pem
          script: |
            echo "âœ… Connected to EC2!"

            # Pull the newly built image
            docker pull ${{ steps.login-ecr.outputs.registry }}/trade-orders-api:${{ github.sha }}

            # Stop and remove the old container if it exists
            docker stop trade-orders-api || true
            docker rm trade-orders-api || true

            # Run the container in detached mode (-d), mapping port 8000, 
            # and pass in the DATABASE_URL environment variable
            docker run -d --name trade-orders-api \
              -p 8000:8000 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              ${{ steps.login-ecr.outputs.registry }}/trade-orders-api:${{ github.sha }}
